//test return 0

//test the pixel lab from 15122

typedef int pixel;       // Library (concrete) view of a pixel
typedef pixel pixelt;   // Client  (abstract) view of a pixel

// Returns the red component of the given pixel p.
int getred(pixel p)
{
 return ( (p& 0x00FF0000) >> 16);
}

// Returns the green component of the given pixel p.
int getgreen(pixel p)
{
 return ((p & 0x0000FF00) >> 8);
}

// Returns the blue component of the given pixel p.
int getblue(pixel p)
{
 return (p & 0x000000FF);
}

// Returns the alpha component of the given pixel p.
int getalpha(pixel p)
{
 return ((p >> 24)&(0x000000FF));
}

pixel makepixel(int alpha, int red, int green, int blue)
{
 return((alpha << 24)|(red << 16)| (green << 8)| (blue));
}
                                                                                     

void histogram(pixelt[]abb, int length, int[] results)
{
  int[] temparray = alloc_array(int, 256);

  for (int i = 0; i < length; i++)
  //@loopinvariant 0 <= i;
  {
    pixelt p =abb[i];
    int average = (getred(p) + getgreen(p) + getblue(p)) / 3;
    temparray[average] = temparray[average] + 1;
  }
  for(int i = 0; i < 256; i++)
  {
    results[i] = temparray[i];
  }
}
int main() {
  pixelt[] abb;
  pixelt[] acc;
  int[] results = alloc_array(int, 256);
 abb = alloc_array(pixelt, 9);
 abb[0] = makepixel(0xFF, 0x01, 0x01, 0x01);
 abb[1] = makepixel(0x01, 0x00, 0xFF, 0xEE);
 abb[2] = makepixel(0xFF, 0xFF, 0xFF, 0xFF);
 abb[3] = makepixel(0xEE, 0xFF, 0xDD, 0x00);
 abb[4] = makepixel(0xDD, 0xCC, 0x00, 0xFF);
 abb[5] = makepixel(0xCC, 0x00, 0xDD, 0xEE);
 abb[6] = makepixel(0x00, 0xEE, 0xFF, 0xDD);
 abb[7] = makepixel(0x00, 0x00, 0x00, 0x00);
 abb[8] = makepixel(0x00, 0xDD, 0xCC, 0xBB);
  histogram(abb, 9, results);
  for (int i = 0; i < 256; i++) {
         if (i == 0x00) assert(results[i] == 1);
    else if (i == 0x01) assert(results[i] == 1);
    else if (i == 0xCC) assert(results[i] == 1);
    else if (i == 0xEE) assert(results[i] == 1);
    else if (i == 0xFF) assert(results[i] == 1);
    else if (i == 0x99) assert(results[i] == 2);
    else if (i == 0x9E) assert(results[i] == 1);
    else if (i == 0xA4) assert(results[i] == 1);
    else assert(results[i] == 0);
  }
  return 0;
}
